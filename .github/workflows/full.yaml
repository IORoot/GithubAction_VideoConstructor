# ╭───────────────────────────────────────────────────────────────────────────╮
# │                               REQUIREMENTS                                │
# ╰───────────────────────────────────────────────────────────────────────────╯
#
# Make sure the following SECRET variables are set to access your server.
# SSH_PASS            = Password to your server to upload video to.  
# SSH_USER            = Username to your server to upload video to.
# RCLONE_CONF_B64     = Configuration of rCLone to allow access to Google Drive.
# MIDJOURNEY_ENV_B64  = The .env file to run Midjourney

name: 🎢 Full Video Constructor


on:
    # Run Via a webhook only
    workflow_dispatch:
      inputs:
        config_b64:
          description: 'Base64 configuration for Video Constructor'     
          required: true


jobs:

    setup_overlays:
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
      steps:


        - name: 🎛️ SETUP - Checkout Repo
          uses: actions/checkout@v3



        - name: 🎛️ SETUP - Base64 decode Configs
          run: |
            echo "${{ inputs.config_b64 }}" | base64 --decode > config.json
            cat config.json



        - name: 🎛️ SETUP - JSON to Environment Variables
          run: |
            ./scripts/env/json_to_env.sh 
            env
        


        - name: Generate Matrix from JSON
          id: set-matrix
          run: |
            jq -c '{"include": [.overlay.overlays[] | {template: .template[], encoded: (tojson | @base64)}]}' config.json > matrix.json
            cat matrix.json
            echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT



        - name: Output Matrix
          run: |
            echo "Matrix Output:"
            cat $GITHUB_OUTPUT


            
    overlays:
      needs: setup_overlays
      uses: ./.github/workflows/overlays.yaml  
      strategy:
        matrix: ${{ fromJson(needs.setup_overlays.outputs.matrix) }}
      with:
        config_b64: ${{ github.event.inputs.config_b64 }} 
        template_name: ${{ matrix.template }}
        encoded_template: ${{ matrix.encoded }}



    video_constructor:
        runs-on: ubuntu-latest
        needs: overlays  
        if: always()  
        steps:


            # ╭───────────────────────────────────────────────────────╮
            # │             GET CONTENTS OF CURRENT REPO              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Checkout Repo
              uses: actions/checkout@v3



            # ╭───────────────────────────────────────────────────────╮
            # │                  Download Artifacts                   │
            # ╰───────────────────────────────────────────────────────╯
            - name: ⤵️ Download Overlay Artifacts
              uses: actions/download-artifact@v4
              continue-on-error: true
              with:
                path: /home/runner/work/GithubAction_VideoConstructor/GithubAction_VideoConstructor/overlay


            - name: Uncompress Artifacts
              run: |
                cd ${GITHUB_WORKSPACE}/overlay
                ls -la
                for zip_file in *.zip; do
                  unzip -o "$zip_file"
                done

            # ╭───────────────────────────────────────────────────────╮
            # │      DECODE THE BASE64 CONFIGS READY TO BE USED       │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Base64 decode Configs
              run: |
                echo "${{ secrets.RCLONE_CONF_B64 }}" | base64 --decode > rclone.conf
                echo "${{ secrets.MIDJOURNEY_ENV_B64 }}" | base64 --decode > midjourney.env.conf
                echo "${{ github.event.inputs.config_b64 }}" | base64 --decode > config.json
                cat config.json



            # ╭───────────────────────────────────────────────────────╮
            # │             JSON TO ENVIRONMENT VARIABLES             │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - JSON to Environment Variables
              run: |
                ./scripts/env/json_to_env.sh 
                env



            # ╭───────────────────────────────────────────────────────╮
            # │             GENERATE A UNIQUE IDENTIFIER              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Generate UUID
              run: |
                  echo "UUID=$(openssl rand -hex 6)" >> $GITHUB_ENV



            # ╭───────────────────────────────────────────────────────╮
            # │                    Install FFMPEG                     │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Install FFMPEG
              uses: FedericoCarboni/setup-ffmpeg@v2
 
            - name: 🎛️ SETUP - Link FFMPEG to /usr/local/bin
              run: |
                cd /usr/local/bin
                env
                ln -s /opt/hostedtoolcache/ffmpeg/*/x64/ffmpeg ./ffmpeg
                ln -s /opt/hostedtoolcache/ffmpeg/*/x64/ffprobe ./ffprobe 



            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                              YOUTUBE SEARCH                              │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │                    INSTALL YT-DLP                     │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🔎 SEARCH - Install yt-dlp
              run: sudo pip install yt-dlp



            # ╭───────────────────────────────────────────────────────╮
            # │                     RUN SEARCH                        │
            # ╰───────────────────────────────────────────────────────╯
            #
            # OUTPUTS = videoid_results.json
            - name: 🔎 SEARCH - Do a Search
              if: ${{ env.VC_SEARCH_RUN }}
              run: |
                  cat config.json | jq -r '.search.searches' > ./config_search.json
                  cat ./config_search.json
                  ./scripts/search/search.sh --json ${GITHUB_WORKSPACE}/config_search.json
                


            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                  MUSIC                                   │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


            - name: 🎸 Music - Download music
              if: ${{ env.VC_MUSIC_RUN }}
              run: |
                  cat config.json | jq -r '.music.musics' > ./config_music.json
                  cat ./config_music.json
                  ./scripts/music/music.sh --json ${GITHUB_WORKSPACE}/config_music.json

                  mkdir -p music
                  cp music*.mp3 music || true
                  ls -la
                  ls -la music 


            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                GENERATOR                                 │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

            # ╭───────────────────────────────────────────────────────╮
            # │                      Setup Node                       │
            # ╰───────────────────────────────────────────────────────╯
            - uses: actions/setup-node@v3.6.0
              with:
                node-version: "18.x"



            # ╭───────────────────────────────────────────────────────╮
            # │                    Setup Midjourney                   │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🏞️ Generate - Setup Midjourney
              if: ${{ env.VC_GENERATE_RUN }}
              run: |
                  env
                  sudo git clone https://github.com/IORoot/MidjourneyAPI ${GITHUB_WORKSPACE}/midjourney
                  sudo chown -Rf runner:docker midjourney
                  cp midjourney.env.conf ${GITHUB_WORKSPACE}/midjourney/.env
                  cd midjourney
                  npm install
                  cat ${GITHUB_WORKSPACE}/config.json | jq -r '.generate.generators' > ./config_generators.json




            # ╭───────────────────────────────────────────────────────╮
            # │                  RUN THE GENERATORS                   │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🏞️ Generate - Run Generator
              if: ${{ env.VC_GENERATE_RUN }}
              continue-on-error: true
              run: |
                cat config.json | jq -r '.generate.generators' > ./config_generate.json
                ./scripts/generate/generate.sh --json ${GITHUB_WORKSPACE}/config_generate.json
                ls -la





            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                DOWNLOADS                                 │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │                     INSTALL MPV                       │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📹 DOWNLOAD - Install mpv
              if: ${{ env.VC_DOWNLOAD_RUN }}
              run: |
                sudo apt-get update
                sudo apt-get install --no-install-recommends mpv
            


            # ╭───────────────────────────────────────────────────────╮
            # │                    Install rClone                     │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📹 DOWNLOAD - Install rClone
              if: ${{ env.VC_DOWNLOAD_RUN }}
              run: |
                sudo apt install rclone

                

            # ╭───────────────────────────────────────────────────────╮
            # │                  RUN THE DOWNLOADER                   │
            # ╰───────────────────────────────────────────────────────╯
            ##
            ## INPUT = videoid_results.json
            ## OUTPUT = MP4 Video files
            ##
            - name: 📹 DOWNLOAD - Run Downloader
              if: ${{ env.VC_DOWNLOAD_RUN }}
              run: |
                cat config.json | jq -r '.download.downloads' > ./config_download.json
                cat ./config_download.json
                ./scripts/download/download.sh \
                    --json ${GITHUB_WORKSPACE}/config_download.json \
                    --searchresults ${GITHUB_WORKSPACE}/search_results.json \
                    --rclone ./rclone.conf
              
                mkdir -p videos
                
                find . -maxdepth 1 -iname "*.mp4" -exec cp {} videos/ \; || true
                find . -maxdepth 1 -iname "*.avi" -exec cp {} videos/ \; || true
                find . -maxdepth 1 -iname "*.mkv" -exec cp {} videos/ \; || true
                find . -maxdepth 1 -iname "*.mov" -exec cp {} videos/ \; || true
                find . -maxdepth 1 -iname "*.flv" -exec cp {} videos/ \; || true

                ls -la
                ls -la videos  



            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                SCRIPTFLOW                                │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │               INSTALL FFMPEG SCRIPTFLOW               │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎥 VIDEO - Install Scriptflow
              if: ${{ env.VC_VIDEO_RUN }}
              run: |
                  sudo git clone https://github.com/IORoot/ffmpeg__bash-scripts.git /tmp/scriptflow
                  sudo mv /tmp/scriptflow/*.sh /usr/local/bin
                  sudo chmod +x /usr/local/bin/*




            # ╭───────────────────────────────────────────────────────╮
            # │  Run /usr/local/bin/scriptflow.sh with the config.json  │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎥 VIDEO - Run ScriptFlow
              if: ${{ env.VC_VIDEO_RUN }}
              run: |
                cat config.json | jq -r '.video.config' > ${GITHUB_WORKSPACE}/config_scriptflow.json
                cat ${GITHUB_WORKSPACE}/config_scriptflow.json
                export PATH=$PATH:$(pwd)
                scriptflow.sh --config $(realpath ./config_scriptflow.json) -t


                  
            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                 OUTPUTS                                  │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


            # ╭───────────────────────────────────────────────────────╮
            # │           Copy specific files into uploads              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📬 OUTPUTS - Create uploads folder
              if: ${{ env.VC_OUTPUT_RUN }}
              run: |
                mkdir -p ${GITHUB_WORKSPACE}/uploads
                cp ${{ env.VC_OUTPUT_INCLUDE }} ${GITHUB_WORKSPACE}/uploads || true
                cp ${GITHUB_WORKSPACE}/overlay/overlay_video.mov ${GITHUB_WORKSPACE}/uploads || true
                ls -la
                ls -la uploads



            # ╭───────────────────────────────────────────────────────╮
            # │       Install rClone to output to Google Drive        │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📬 OUTPUTS - Install rClone
              if: ${{ env.VC_OUTPUT_OUTPUTS_GDRIVE_RUN }}
              run: |
                sudo apt install rclone



            # ╭───────────────────────────────────────────────────────╮
            # │       Install SSH/SSHPass for saving to server        │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📬 OUTPUTS - Install ssh/sshpass
              if: ${{ env.VC_OUTPUTS_SSH_RUN }}
              run: |
                sudo apt-get install --no-install-recommends ssh sshpass



            # ╭───────────────────────────────────────────────────────╮
            # │                  Run outputs script                   │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📬 OUTPUTS - Run Outputs
              
              if: ${{ env.VC_OUTPUT_RUN }}
              continue-on-error: true
              run: |
                cat config.json | jq -r '.output.outputs' > ${GITHUB_WORKSPACE}/output_config.json
                cat ./output_config.json
                ./scripts/outputs/outputs.sh \
                    --json ${GITHUB_WORKSPACE}/output_config.json \
                    --rclone ./rclone.conf \
                    --sshuser ${{ secrets.SSH_USER }} \
                    --sshpass ${{ secrets.SSH_PASS }}


            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                               ARTIFACTS                                  │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            - name: 📦 ARTIFACTS - Upload ./uploads folder as artifact if Upload to outputs Fails

              uses: actions/upload-artifact@v3
              with:
                name: uploads
                path: ./uploads/
                

            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                DEBUGGERS                                 │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

            # ╭───────────────────────────────────────────────────────╮
            # │                         HTTP                          │
            # ╰───────────────────────────────────────────────────────╯
            # - uses: dsmirc/ngrok-tunnel-action@cd
            #   name: 🪲 DEBUG - Setup NGROK Tunnel
            #   with:
            #     timeout: 1h
            #     port: 8080
            #     ngrok_authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}
            #     tunnel_type: http
            #     save_url_to_filename: tunnelURL.md

            # # ╭───────────────────────────────────────────────────────╮
            # # │                          SSH                          │
            # # ╰───────────────────────────────────────────────────────╯
            # - name: 🪲 DEBUG - Setup upterm session
            #   uses: lhotari/action-upterm@v1