# ╭───────────────────────────────────────────────────────────────────────────╮
# │                               REQUIREMENTS                                │
# ╰───────────────────────────────────────────────────────────────────────────╯
#
# Make sure the following SECRET variables are set to access your server.
# SSH_PASS        = Password to your server to upload video to.  
# SSH_USER        = Username to your server to upload video to.
# RCLONE_CONF_B64 = Configuration of rCLone to allow access to Google Drive.

name: 🎢 Full Video Constructor


on:
    # Run Via a webhook only
    workflow_dispatch:
      inputs:
        config_b64:
          description: 'Base64 configuration for Video Constructor'     
          required: true


jobs:

    # ╭──────────────────────────────────────────────────────────────────────────╮
    # │   This is all one job. The reason is because moving large video files    │░
    # │       across jobs using artifacts takes time and space. Therefore        │░
    # │        keeping the whole process on a single job increases speed.        │░
    # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    video_constructor:
        runs-on: ubuntu-latest
        continue-on-error: true
        steps:



            # ╭───────────────────────────────────────────────────────╮
            # │             GET CONTENTS OF CURRENT REPO              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Checkout Repo
              uses: actions/checkout@v3



            # ╭───────────────────────────────────────────────────────╮
            # │      DECODE THE BASE64 CONFIGS READY TO BE USED       │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Base64 decode Configs
              run: |
                echo "${{ secrets.RCLONE_CONF_B64 }}" | base64 --decode > rclone.conf
                echo "${{ github.event.inputs.config_b64 }}" | base64 --decode > config.json



            # ╭───────────────────────────────────────────────────────╮
            # │             JSON TO ENVIRONMENT VARIABLES             │
            # ╰───────────────────────────────────────────────────────╯
            ## If a section of the config is present then the environment
            ## variable is set to TRUE.
            ##
            - name: 🎛️ SETUP - JSON to Environment Variables
              run: |
                echo "WORKFLOW_SEARCH=$(jq -e '.search' config.json > /dev/null && echo TRUE || echo FALSE)" >> $GITHUB_ENV  
                echo "WORKFLOW_DOWNLOAD=$(jq -e '.download' config.json > /dev/null && echo TRUE || echo FALSE)" >> $GITHUB_ENV  
                echo "WORKFLOW_MIDJOURNEY=$(jq -e '.midjourney' config.json > /dev/null && echo TRUE || echo FALSE)" >> $GITHUB_ENV  
                echo "WORKFLOW_OVERLAY=$(jq -e '.overlay' config.json > /dev/null && echo TRUE || echo FALSE)" >> $GITHUB_ENV  
                echo "WORKFLOW_VIDEO=$(jq -e '.video' config.json > /dev/null && echo TRUE || echo FALSE)" >> $GITHUB_ENV  
                echo "WORKFLOW_OUTPUTS=$(jq -e '.outputs' config.json > /dev/null && echo TRUE || echo FALSE)" >> $GITHUB_ENV  



            # ╭───────────────────────────────────────────────────────╮
            # │             GENERATE A UNIQUE IDENTIFIER              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Generate UUID
              run: |
                  echo "UUID=$(openssl rand -hex 6)" >> $GITHUB_ENV



            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                              YOUTUBE SEARCH                              │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │                    INSTALL YT-DLP                     │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🔎 SEARCH - Install yt-dlp
              run: sudo pip install yt-dlp



            # ╭───────────────────────────────────────────────────────╮
            # │                     RUN SEARCH                        │
            # ╰───────────────────────────────────────────────────────╯
            #
            # OUTPUTS = videoid_results.json
            #
            - name: 🔎 SEARCH - Do YouTube URL Search
              run: |
                SEARCH_QUERY=$(cat config.json | jq -r '.search.queryUrl')
                SEARCH_KEYWORD=$(cat config.json | jq -r '.search.keyword')
                SEARCH_COUNT=$(cat config.json | jq -r '.search.count')

                if jq -e '.search.queryUrl // empty' config.json > /dev/null; then
                    ./scripts/search/search_url.sh "${SEARCH_QUERY}" ${SEARCH_COUNT}
                fi

                if jq -e '.search.keyword // empty' config.json > /dev/null; then
                    ./scripts/search/search_keyword.sh "${SEARCH_KEYWORD}" ${SEARCH_COUNT}
                fi
                


            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                 SNIPPETS                                 │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │                     INSTALL MPV                       │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📹 DOWNLOAD - Install mpv
              run: |
                sudo apt update
                sudo apt install mpv

            

            # ╭───────────────────────────────────────────────────────╮
            # │                  RUN THE DOWNLOADER                   │
            # ╰───────────────────────────────────────────────────────╯
            ##
            ## INPUT = videoid_results.json
            ## OUTPUT = MP4 Video files
            ##
            - name: 📹 DOWNLOAD - Run Snippet Downloader
              continue-on-error: true
              run: |

                DOWNLOAD_COUNT=$(cat config.json | jq -r '.download.count')
                DOWNLOAD_DURATION=$(cat config.json | jq -r '.download.duration')
                DOWNLOAD_TIMESTAMPS=$(cat config.json | jq -r '.download.timestamps')

                cat videoid_results.json | jq -r -c '.results[] | .video' | while read -r video; do

                    video_id=$(echo "$video" | sed 's/^.*=//' | cut -d'&' -f1)

                    echo "Download snippets for $video_id"
                    
                    command="./scripts/snippets/yt_snippets.sh --videoid $video_id --count ${DOWNLOAD_COUNT} --duration ${DOWNLOAD_DURATION}"

                    if [ -n "${DOWNLOAD_TIMESTAMPS}" ]; then
                        command+=" --timestamps ${DOWNLOAD_TIMESTAMPS}"
                    fi
                    
                    eval "$command"

                done

                ls -la
                    


            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                 OVERLAY                                  │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                SCRIPTFLOW                                │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                 OUTPUTS                                  │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


            
            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                DEBUGGERS                                 │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

            # ╭───────────────────────────────────────────────────────╮
            # │                          SSH                          │
            # ╰───────────────────────────────────────────────────────╯
            # - name: Setup upterm session
            #   uses: lhotari/action-upterm@v1

            # ╭───────────────────────────────────────────────────────╮
            # │                         HTTP                          │
            # ╰───────────────────────────────────────────────────────╯
            # - uses: dsmirc/ngrok-tunnel-action@cd
            # with:
            #   timeout: 1h
            #   port: 8080
            #   ngrok_authtoken: ${{ secrets.NGROK_AUTHTOKEN }}
            #   tunnel_type: http
            #   save_url_to_filename: tunnelURL.md