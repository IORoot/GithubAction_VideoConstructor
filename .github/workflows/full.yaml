# ╭───────────────────────────────────────────────────────────────────────────╮
# │                               REQUIREMENTS                                │
# ╰───────────────────────────────────────────────────────────────────────────╯
#
# Make sure the following SECRET variables are set to access your server.
# SSH_PASS        = Password to your server to upload video to.  
# SSH_USER        = Username to your server to upload video to.
# RCLONE_CONF_B64 = Configuration of rCLone to allow access to Google Drive.

name: 🎢 Full Video Constructor


on:
    # Run Via a webhook only
    workflow_dispatch:
      inputs:
        config_b64:
          description: 'Base64 configuration for Video Constructor'     
          required: true


jobs:

    # ╭──────────────────────────────────────────────────────────────────────────╮
    # │   This is all one job. The reason is because moving large video files    │░
    # │       across jobs using artifacts takes time and space. Therefore        │░
    # │        keeping the whole process on a single job increases speed.        │░
    # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
    video_constructor:
        runs-on: ubuntu-latest

        steps:



            # ╭───────────────────────────────────────────────────────╮
            # │             GET CONTENTS OF CURRENT REPO              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Checkout Repo
              uses: actions/checkout@v3



            # ╭───────────────────────────────────────────────────────╮
            # │      DECODE THE BASE64 CONFIGS READY TO BE USED       │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Base64 decode Configs
              run: |
                echo "${{ secrets.RCLONE_CONF_B64 }}" | base64 --decode > rclone.conf
                echo "${{ github.event.inputs.config_b64 }}" | base64 --decode > config.json
                cat config.json



            # ╭───────────────────────────────────────────────────────╮
            # │             JSON TO ENVIRONMENT VARIABLES             │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - JSON to Environment Variables
              run: |
                ./scripts/env/json_to_env.sh 
                env


            # ╭───────────────────────────────────────────────────────╮
            # │             GENERATE A UNIQUE IDENTIFIER              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Generate UUID
              run: |
                  echo "UUID=$(openssl rand -hex 6)" >> $GITHUB_ENV



            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                              YOUTUBE SEARCH                              │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │                    INSTALL YT-DLP                     │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🔎 SEARCH - Install yt-dlp
              run: sudo pip install yt-dlp



            # ╭───────────────────────────────────────────────────────╮
            # │                     RUN SEARCH                        │
            # ╰───────────────────────────────────────────────────────╯
            #
            # OUTPUTS = videoid_results.json
            - name: 🔎 SEARCH - Do a Search
              if: ${{ env.VC_SEARCH_RUN }}
              run: |
                  cat config.json | jq -r '.search.searches' > ./config_search.json
                  cat ./config_search.json
                  ./scripts/search/search.sh --json ${GITHUB_WORKSPACE}/config_search.json
                


            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                DOWNLOADS                                 │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │                     INSTALL MPV                       │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📹 DOWNLOAD - Install mpv
              if: ${{ env.VC_DOWNLOAD_RUN }}
              run: |
                sudo apt-get update
                sudo apt-get install --no-install-recommends mpv
            


            # ╭───────────────────────────────────────────────────────╮
            # │                    Install rClone                     │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📹 DOWNLOAD - Install rClone
              if: ${{ env.VC_DOWNLOAD_RUN }}
              run: |
                sudo apt install rclone

                

            # ╭───────────────────────────────────────────────────────╮
            # │                  RUN THE DOWNLOADER                   │
            # ╰───────────────────────────────────────────────────────╯
            ##
            ## INPUT = videoid_results.json
            ## OUTPUT = MP4 Video files
            ##
            - name: 📹 DOWNLOAD - Run Downloader
              if: ${{ env.VC_DOWNLOAD_RUN }}
              run: |
                cat config.json | jq -r '.download.downloads' > ./config_download.json
                cat ./config_download.json
                ./scripts/download/download.sh \
                    --json ${GITHUB_WORKSPACE}/config_download.json \
                    --searchresults ${GITHUB_WORKSPACE}/search_results.json \
                    --rclone ./rclone.conf
              
                mkdir -p videos
                
                find . -maxdepth 1 -iname "*.mp4" -exec mv {} videos/ \; || true
                find . -maxdepth 1 -iname "*.avi" -exec mv {} videos/ \; || true
                find . -maxdepth 1 -iname "*.mkv" -exec mv {} videos/ \; || true
                find . -maxdepth 1 -iname "*.mov" -exec mv {} videos/ \; || true
                find . -maxdepth 1 -iname "*.flv" -exec mv {} videos/ \; || true

                ls -la
                ls -la videos 
                    


            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                 OVERLAY                                  │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │                      Setup Node                       │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Set up Node.js
              if: ${{ env.VC_OVERLAY_RUN }}
              uses: actions/setup-node@v2
              with:
                node-version: '22'



            # ╭───────────────────────────────────────────────────────╮
            # │                  Install PHP Server                   │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Set up PHP
              if: ${{ env.VC_OVERLAY_RUN }}
              uses: shivammathur/setup-php@v2
              with:
                php-version: '8.0'



            # ╭───────────────────────────────────────────────────────╮
            # │                    Install FFMPEG                     │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Install FFMPEG
              if: ${{ env.VC_OVERLAY_RUN }}
              uses: FedericoCarboni/setup-ffmpeg@v2
 
            - name: 🎨 OVERLAY - Link FFMPEG to /usr/local/bin
              if: ${{ env.VC_OVERLAY_RUN }}
              run: |
                cd /usr/local/bin
                env
                ln -s /opt/hostedtoolcache/ffmpeg/*/x64/ffmpeg ./ffmpeg
                ln -s /opt/hostedtoolcache/ffmpeg/*/x64/ffprobe ./ffprobe  



            # ╭───────────────────────────────────────────────────────╮
            # │                   Setup the Overlay                   │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Setup Overlay
              if: ${{ env.VC_OVERLAY_RUN }}
              run: | 
                unzip ${GITHUB_WORKSPACE}/overlays/${{ env.VC_OVERLAY_TEMPLATE }}/template.zip -d ${GITHUB_WORKSPACE}/overlays/${{ env.VC_OVERLAY_TEMPLATE }}/



            # ╭───────────────────────────────────────────────────────╮
            # │             Optional setup of inputs.json             │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Setup Inputs.json
              if: ${{ env.VC_OVERLAY_RUN }}
              run: |   
                cat config.json | jq -r '.overlay.inputs' > ${GITHUB_WORKSPACE}/overlays/${{ env.VC_OVERLAY_TEMPLATE }}/inputs.json
                cat ${GITHUB_WORKSPACE}/overlays/${{ env.VC_OVERLAY_TEMPLATE }}/inputs.json
                
                
            
            # ╭───────────────────────────────────────────────────────╮
            # │                   Start PHP Server                    │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Start PHP server in background
              if: ${{ env.VC_OVERLAY_RUN }}
              run: |
                php -S 0.0.0.0:8080 -t ./overlays/${{ env.VC_OVERLAY_TEMPLATE }}/ &
        


            # ╭───────────────────────────────────────────────────────╮
            # │         Install Timecut with latest puppeteer         │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Setup Timecut
              if: ${{ env.VC_OVERLAY_RUN }}
              continue-on-error: true
              run: |
                npm install puppeteer@22.10.0

                cd ${GITHUB_WORKSPACE}/node_modules/timesnap/
                rm -Rf node_modules

                sed -i 's/"puppeteer": "\^2.1.1"/"puppeteer": "\^22.10.0"/' package.json
                npm install puppeteer@22.10.0

                cd ${GITHUB_WORKSPACE}




            # ╭───────────────────────────────────────────────────────╮
            # │               Ensure website is running               │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Test Site Running
              if: ${{ env.VC_OVERLAY_RUN }}
              run: |
                curl "http://localhost:8080"



            # ╭───────────────────────────────────────────────────────╮
            # │             Use Timecut to capture Video              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎨 OVERLAY - Capture Video
              continue-on-error: true
              if: ${{ env.VC_OVERLAY_RUN }}
              run: |
                node ${GITHUB_WORKSPACE}/node_modules/timecut/cli.js "http://localhost:8080" --selector="${{ env.VC_OVERLAY_TIMECUT_TARGET }}" --viewport="${{ env.VC_OVERLAY_TIMECUT_VIEWPORT }}" ${{ env.VC_OVERLAY_TIMECUT_SETTINGS }} --transparent-background --output-options="-c:v png" --pix-fmt=rgba --output=overlay_video.mov --launch-arguments="--no-sandbox --disable-setuid-sandbox --allow-file-access-from-files"
                mkdir overlay
                mv overlay_video.mov ./overlay
                ls -la
                ls -la ./overlay



            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                SCRIPTFLOW                                │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░



            # ╭───────────────────────────────────────────────────────╮
            # │               INSTALL FFMPEG SCRIPTFLOW               │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎥 VIDEO - Install Scriptflow
              if: ${{ env.VC_VIDEO_RUN }}
              run: |
                  sudo git clone https://github.com/IORoot/ffmpeg__bash-scripts.git /tmp/scriptflow
                  sudo mv /tmp/scriptflow/*.sh /usr/local/bin
                  sudo chmod +x /usr/local/bin/*




            # ╭───────────────────────────────────────────────────────╮
            # │  Run /usr/local/bin/scriptflow.sh with the config.json  │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎥 VIDEO - Run ScriptFlow
              if: ${{ env.VC_VIDEO_RUN }}
              run: |
                cat config.json | jq -r '.video.config' > ${GITHUB_WORKSPACE}/video_config.json
                cat ${GITHUB_WORKSPACE}/video_config.json
                export PATH=$PATH:$(pwd)
                scriptflow.sh --config $(realpath ./video_config.json) -t
                
                mkdir -p uploads
                mv *.mp4 uploads
                mv *.jpg uploads
                mv *.png uploads
                ls -la
                ls -la uploads


                  
            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                 OUTPUTS                                  │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░


            # ╭───────────────────────────────────────────────────────╮
            # │       Install rClone to output to Google Drive        │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📬 OUTPUTS - Install rClone
              if: ${{ env.VC_OUTPUT_OUTPUTS_GDRIVE_RUN }}
              run: |
                sudo apt install rclone



            # ╭───────────────────────────────────────────────────────╮
            # │       Install SSH/SSHPass for saving to server        │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📬 OUTPUTS - Install ssh/sshpass
              if: ${{ env.VC_OUTPUTS_SSH_RUN }}
              run: |
                sudo apt-get install --no-install-recommends ssh sshpass



            # ╭───────────────────────────────────────────────────────╮
            # │                  Run outputs script                   │
            # ╰───────────────────────────────────────────────────────╯
            - name: 📬 OUTPUTS - Run Outputs
              if: ${{ env.VC_OUTPUT_RUN }}
              run: |
                cat config.json | jq -r '.output.outputs' > ${GITHUB_WORKSPACE}/output_config.json
                cat ./output_config.json
                ./scripts/outputs/outputs.sh \
                    --json ${GITHUB_WORKSPACE}/output_config.json \
                    --rclone ./rclone.conf \
                    --sshuser ${{ secrets.SSH_USER }} \
                    --sshpass ${{ secrets.SSH_PASS }}



     

            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                DEBUGGERS                                 │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

            # ╭───────────────────────────────────────────────────────╮
            # │                         HTTP                          │
            # ╰───────────────────────────────────────────────────────╯
            # - uses: dsmirc/ngrok-tunnel-action@cd
            #   name: 🪲 DEBUG - Setup NGROK Tunnel
            #   with:
            #     timeout: 1h
            #     port: 8080
            #     ngrok_authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}
            #     tunnel_type: http
            #     save_url_to_filename: tunnelURL.md

            # ╭───────────────────────────────────────────────────────╮
            # │                          SSH                          │
            # ╰───────────────────────────────────────────────────────╯
            # - name: 🪲 DEBUG - Setup upterm session
            #   uses: lhotari/action-upterm@v1