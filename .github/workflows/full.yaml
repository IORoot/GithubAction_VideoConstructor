# ╭───────────────────────────────────────────────────────────────────────────╮
# │                               REQUIREMENTS                                │
# ╰───────────────────────────────────────────────────────────────────────────╯
#
# Make sure the following SECRET variables are set to access your server.
# SSH_PASS            = Password to your server to upload video to.  
# SSH_USER            = Username to your server to upload video to.
# RCLONE_CONF_B64     = Configuration of rCLone to allow access to Google Drive.
# MIDJOURNEY_ENV_B64  = The .env file to run Midjourney

name: 🎢 Full Video Constructor


on:
    # Run Via a webhook only
    workflow_dispatch:
      inputs:
        config_b64:
          description: 'Base64 configuration for Video Constructor'     
          required: true


jobs:

    setup:
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}
        vc_generate_run: ${{ steps.set-vars.outputs.VC_GENERATE_RUN }}
        vc_download_run: ${{ steps.set-vars.outputs.VC_DOWNLOAD_RUN }}
        vc_overlay_run: ${{ steps.set-vars.outputs.VC_OVERLAY_RUN }}
        vc_music_run: ${{ steps.set-vars.outputs.VC_MUSIC_RUN }}
        vc_video_run: ${{ steps.set-vars.outputs.VC_VIDEO_RUN }}
        vc_output_run: ${{ steps.set-vars.outputs.VC_OUTPUT_RUN }}
        vc_scheduler_run: ${{ steps.set-vars.outputs.VC_SCHEDULER_RUN }}
      steps:


        - name: 🎛️ SETUP - Checkout Repo
          uses: actions/checkout@v3



        - name: 🎛️ SETUP - Base64 decode Configs
          run: |
            echo "${{ inputs.config_b64 }}" | base64 --decode > config.json
            cat config.json



        - name: 🎛️ SETUP - Base64 decode Secrets
          run: |
            echo "${{ secrets.RCLONE_CONF_B64 }}" | base64 --decode > rclone.conf
            cat rclone.conf
            echo "${{ secrets.MIDJOURNEY_ENV_B64 }}" | base64 --decode > midjourney.env.conf
            cat midjourney.env.conf
            ls -la



        - name: 🎛️ SETUP - JSON to Environment Variables
          id: set-vars
          run: |
            ./scripts/env/json_to_env.sh
            cat $GITHUB_OUTPUT
            echo "VC_OVERLAY_RUN: ${VC_OVERLAY_RUN}"



        - name: ⚙️ Generate Matrix from JSON for overlays
          id: set-matrix
          run: |
            jq -c '{"include": [.overlay.overlays[] | {template: .template[], encoded: (tojson | @base64)}]}' config.json > matrix.json || true
            cat matrix.json
            echo "matrix=$(cat matrix.json)" >> $GITHUB_OUTPUT


            
    overlays:
      needs: setup
      if: needs.setup.outputs.vc_overlay_run == 'true'
      uses: ./.github/workflows/overlays.yaml  
      strategy:
        matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
      with:
        config_b64: ${{ github.event.inputs.config_b64 }} 
        template_name: ${{ matrix.template }}
        encoded_template: ${{ matrix.encoded }}
      secrets: inherit
              
        
    music:
      needs: setup
      if: needs.setup.outputs.vc_music_run == 'true'
      uses: ./.github/workflows/music.yaml
      with:
        config_b64: ${{ github.event.inputs.config_b64 }} 
      secrets: inherit          


    generator:
      needs: setup
      if: needs.setup.outputs.vc_generate_run == 'true'
      uses: ./.github/workflows/generators.yaml
      with:
        config_b64: ${{ github.event.inputs.config_b64 }} 
      secrets: inherit


    # Contains 'Search' and 'download'
    downloads:
      needs: [setup]
      if: needs.setup.outputs.vc_download_run == 'true'
      uses: ./.github/workflows/download.yaml
      with:
        config_b64: ${{ github.event.inputs.config_b64 }} 
      secrets: inherit



    # ╭──────────────────────────────────────────────────────────────────────────╮
    # │                                                                          │░
    # │                                                                          │░
    # │                                SCRIPTFLOW                                │░
    # │                                                                          │░
    # │                                                                          │░
    # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

    scriptflow:
        runs-on: ubuntu-latest
        needs: [overlays, music, generator, downloads] 
        if: always()  
        steps:


            # ╭───────────────────────────────────────────────────────╮
            # │             GET CONTENTS OF CURRENT REPO              │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Checkout Repo
              uses: actions/checkout@v3



            # ╭───────────────────────────────────────────────────────╮
            # │                  Download Artifacts                   │
            # ╰───────────────────────────────────────────────────────╯
            - name: ⤵️ Download Artifacts
              uses: actions/download-artifact@v4
              continue-on-error: true 
              with:
                merge-multiple: true
                path: /home/runner/work/GithubAction_VideoConstructor/GithubAction_VideoConstructor/assets



            - name: 🎛️ List and Copy Artifacts Assets
              continue-on-error: true 
              run: |
                ls -la /home/runner/work/GithubAction_VideoConstructor/GithubAction_VideoConstructor/assets


                
            # ╭───────────────────────────────────────────────────────╮
            # │      DECODE THE BASE64 CONFIGS READY TO BE USED       │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Base64 decode Configs
              run: |
                echo "${{ github.event.inputs.config_b64 }}" | base64 --decode > config.json
                cat config.json
                ./scripts/env/json_to_env.sh 
                env



            # ╭───────────────────────────────────────────────────────╮
            # │                    Install FFMPEG                     │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎛️ SETUP - Install FFMPEG
              uses: FedericoCarboni/setup-ffmpeg@v2
 
            - name: 🎛️ SETUP - Link FFMPEG to /usr/local/bin
              run: |
                cd /usr/local/bin
                env
                ln -s /opt/hostedtoolcache/ffmpeg/*/x64/ffmpeg ./ffmpeg
                ln -s /opt/hostedtoolcache/ffmpeg/*/x64/ffprobe ./ffprobe 



            # ╭───────────────────────────────────────────────────────╮
            # │               INSTALL FFMPEG SCRIPTFLOW               │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎥 VIDEO - Install Scriptflow
              if: ${{ env.VC_VIDEO_RUN }}
              run: |
                  sudo git clone https://github.com/IORoot/ffmpeg__bash-scripts.git /tmp/scriptflow
                  sudo mv /tmp/scriptflow/*.sh /usr/local/bin
                  sudo chmod +x /usr/local/bin/*



            # ╭───────────────────────────────────────────────────────╮
            # │  Run /usr/local/bin/scriptflow.sh with the config.json  │
            # ╰───────────────────────────────────────────────────────╯
            - name: 🎥 VIDEO - Run ScriptFlow
              if: ${{ env.VC_VIDEO_RUN }}
              run: |
                cat config.json | jq -r '.video.config' > ${GITHUB_WORKSPACE}/config_scriptflow.json
                cat ${GITHUB_WORKSPACE}/config_scriptflow.json
                export PATH=$PATH:$(pwd)
                scriptflow.sh --config $(realpath ./config_scriptflow.json) -t


            # NOTE - UPLOADS/DOWNLOADS Start in the ROOT folder, NOT ${GITHUB_WORKSPACE}
            # Give full path to file for it to work.
            - name: 📦 ARTIFACTS - Upload ./uploads folder as artifact if Upload to outputs Fails
              uses: actions/upload-artifact@v3
              with:
                name: output
                path: /home/runner/work/GithubAction_VideoConstructor/GithubAction_VideoConstructor/output.mp4



    outputs:
      needs: scriptflow
      uses: ./.github/workflows/outputs.yaml 
      if: always()
      with:
        config_b64: ${{ github.event.inputs.config_b64 }} 
      secrets: inherit   
      
                

            # ╭──────────────────────────────────────────────────────────────────────────╮
            # │                                                                          │░
            # │                                                                          │░
            # │                                DEBUGGERS                                 │░
            # │                                                                          │░
            # │                                                                          │░
            # ╰░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

            # ╭───────────────────────────────────────────────────────╮
            # │                         HTTP                          │
            # ╰───────────────────────────────────────────────────────╯
            # - uses: dsmirc/ngrok-tunnel-action@cd
            #   name: 🪲 DEBUG - Setup NGROK Tunnel
            #   with:
            #     timeout: 1h
            #     port: 8080
            #     ngrok_authtoken: ${{ secrets.NGROK_AUTH_TOKEN }}
            #     tunnel_type: http
            #     save_url_to_filename: tunnelURL.md

            # # ╭───────────────────────────────────────────────────────╮
            # # │                          SSH                          │
            # # ╰───────────────────────────────────────────────────────╯
            # - name: 🪲 DEBUG - Setup upterm session
            #   uses: lhotari/action-upterm@v1